{"version":3,"sources":["StrokeTreatment.js","LocationHandler.js","App.js","serviceWorker.js","index.js"],"names":["PscText","CscText","StrokeTreatment","props","handleChange","html","setState","target","name","value","triggerHospitalChange","changedState","_","forEach","thisState","index","state","isCsc","decisionText","ttCsc","ttPsc","ttBetween","cscNeedle","pscNeedle","tc","parseInt","tp","tBetween","defaultBetween","defaultTtPsc","defaultTtCsc","timeBetween","type","ALTEPLASE","pscList","timeTo","cscList","defaultState","cpc","renderClosestHospital","bind","renderDecisionText","renderSecondaryHospital","label","hospital","city","replace","timeToNeedle","secondaryTimeToMessage","timeDistance","this","title","rangeMessages","className","htmlFor","id","onChange","min","max","Component","googleMapsLoader","Loader","process","LocationHandler","comprehensiveStrokeCenters","observable","primaryStrokeCenters","position","latitude","longitude","downloadNewList","getLocation","hasCsc","hasPsc","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","lat","coords","lng","sessionStorage","getItem","setUserPosition","axios","url","mdhList","body","cheerio","load","data","csc","next","children","item","push","parseHospital","psc","google","matrixService","maps","DistanceMatrixService","getDistanceMatrix","promisify","userPosition","origins","destinations","map","travelMode","cscResponse","sortedCsc","parseDistanceMatrixResults","pscResponse","sortedPsc","timeBetweenResponse","setItem","hospitalList","response","rows","elements","matrixItem","status","Math","round","duration","timeToText","text","timeToDistance","distance","orderBy","split","length","newHospitalName","splice","trim","App","observer","context","handleTabClick","e","preventDefault","tab","cscs","pscs","loading","locationHandler","then","fa","href","onClick","Boolean","window","location","hostname","match","require","config","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1bf233b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ALTEPLASE } from './App';\nimport _ from 'lodash';\nimport { toJS } from 'mobx';\n\nconst PscText = 'You should go to {0} (Primary Stroke Center)';\nconst CscText = 'You should go to {0} (Comprehensive Stroke Center)';\n\nclass StrokeTreatment extends Component {\n    constructor(props) {\n        super(props);\n        var defaultBetween = 0, \n            defaultTtPsc = 15,\n            defaultTtCsc = 45,\n            defaultText = PscText,\n            defaultIsCsc = false;\n\n        if (props.timeBetween) {\n            defaultBetween = props.timeBetween;\n        } else if( props.type !== ALTEPLASE) {\n            defaultBetween = 30;\n        }\n        if (props.pscList && props.pscList[0] && props.pscList[0].timeTo) {\n            defaultTtPsc = props.pscList[0].timeTo;\n        }\n        if (props.cscList && props.cscList[0] && props.cscList[0].timeTo) {\n            defaultTtCsc = props.cscList[0].timeTo;\n        }\n\n        const defaultState = {\n            cscNeedle: 30,\n            pscNeedle: 30,\n            ttPsc: defaultTtPsc,\n            ttCsc: defaultTtCsc,\n            ttBetween: defaultBetween,\n            cpc: false,\n            isCsc: defaultIsCsc,\n            decisionText: defaultText\n        };\n\n        if (this.isCsc(defaultState)) {\n            defaultState.decisionText = CscText;\n            defaultState.isCsc = true;\n        }\n\n        this.state = defaultState;\n        this.state['decisionText'] = defaultState.decisionText;\n        this.state['isCsc'] = defaultState.isCsc;\n\n        this.renderClosestHospital = this.renderClosestHospital.bind(this);\n        this.renderDecisionText = this.renderDecisionText.bind(this);\n        this.isCsc = this.isCsc.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.renderSecondaryHospital = this.renderSecondaryHospital.bind(this);\n    }\n\n    handleChange = (html) => {\n        this.setState({ [html.target.name]: html.target.value });\n        \n        this.triggerHospitalChange([html.target.name], [html.target.value]);\n      };\n\n    triggerHospitalChange = (changedState, value) => {\n        _.forEach(changedState, (thisState, index) => {\n            // eslint-disable-next-line\n            this.state[thisState] = value[index];\n        });\n        \n        if (this.isCsc()) {\n            this.setState({ isCsc: true });\n            this.setState({ decisionText: CscText });\n        } else {\n            this.setState({ isCsc: false });\n            this.setState({ decisionText:  PscText });\n        }\n    }\n\n    isCsc = (state) => {\n        let { ttCsc, ttPsc, ttBetween, cscNeedle, pscNeedle } = state || this.state;\n        const tc = parseInt(ttCsc, 10);\n        const tp = parseInt(ttPsc, 10);\n        const tBetween = parseInt(ttBetween, 10);\n\n        const nc = parseInt(cscNeedle, 10);\n        const np = parseInt(pscNeedle, 10);\n        \n        if ((tc + nc) > (tp + np + tBetween)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    renderClosestHospital(label, hospital) {\n        if (!hospital) {\n            return;\n        }\n        return (\n            <label>Closest {label}:<br/> {hospital.name} - {hospital.city}</label>\n        );\n    }\n\n    renderDecisionText(decisionText, hospital) {\n        const goToText = decisionText.replace(/\\{0\\}/, `${hospital.name} - ${hospital.city}`);\n        return goToText;\n    }\n\n    renderSecondaryHospital(hospital, timeToNeedle, secondaryTimeToMessage) {\n        const timeDistance = parseInt(hospital.timeTo, 10) + parseInt(timeToNeedle, 10)\n        return `${hospital.name} - ${hospital.city} (${secondaryTimeToMessage}: ${timeDistance} minutes)`;\n    }\n\n    render() {\n      const { title, rangeMessages, type, pscList, cscList, secondaryTimeToMessage } = this.props;\n      let { cscNeedle, pscNeedle, ttPsc, ttCsc, ttBetween, isCsc, decisionText } = this.state;\n\n      return (\n        <div>\n          <div className=\"row mt-3 mb-3\">\n            <h2 className=\"col-12 text-center\">Time to {title}</h2>\n          </div>\n          <form>\n          <div className=\"row align-items-center\">\n            <label className={\"col-\" + (type === ALTEPLASE ? '6' : '4')} htmlFor=\"time-to-psc\">Time to Primary Stroke Center</label>\n            <label className={\"col-\" + (type === ALTEPLASE ? '6' : '4')} htmlFor=\"time-to-csc\">Time to Comprehensive Stroke Center</label>\n            <label className={\"col-\" + (type === ALTEPLASE ? ' d-none' : '4')} htmlFor=\"time-between\">Time from Primary Stroke Center to Comprehensive Stroke Center</label>\n          </div>\n\n          <div className=\"row\">\n            <div className={\"col-\" + (type === ALTEPLASE ? '6' : '4')}>\n              <div className=\"form-group\">\n                {this.renderClosestHospital('PSC', pscList[0])}\n                <input className=\"form-control\" type=\"number\" name=\"ttPsc\" id=\"time-to-psc\" value={ttPsc} onChange={this.handleChange}/>\n              </div>\n            </div>\n\n            <div className={\"col-\" + (type === ALTEPLASE ? '6' : '4')}>\n              <div className=\"form-group\">\n                {this.renderClosestHospital('CSC', cscList[0])}\n                <input className=\"form-control\" type=\"number\" name=\"ttCsc\" id=\"time-to-csc\" value={ttCsc} onChange={this.handleChange}/>\n              </div>\n            </div>\n\n\n            <div className={\"col-\" + (type === ALTEPLASE ? ' d-none' : '4')}>\n              <div className=\"form-group\">\n                <input className=\"form-control\" type=\"number\" name=\"ttBetween\" id=\"time-between\" value={ttBetween} onChange={this.handleChange}/>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"pscNeedle\">{rangeMessages[0]} {pscNeedle}</label>\n            <input type=\"range\" min={1} max={120} className=\"form-control-range\" id=\"pscNeedle\" name=\"pscNeedle\" value={pscNeedle} onChange={this.handleChange}></input>\n            <label htmlFor=\"cscNeedle\">{rangeMessages[1]} {cscNeedle}</label>\n            <input type=\"range\" min={1} max={120} className=\"form-control-range\" id=\"cscNeedle\" name=\"cscNeedle\" value={cscNeedle} onChange={this.handleChange}></input>\n          </div>\n\n            <div className=\"row align-items-center\">\n              <div className=\"col-6 text-right\">\n                <span>Total time to {title} if</span>\n              </div>\n              <div className=\"col-6\">\n                <p>PSC First: <strong>{parseInt(this.state.pscNeedle, 10) + parseInt(this.state.ttPsc, 10) + parseInt(this.state.ttBetween, 10)}</strong></p>\n                <p>CSC First: <strong>{parseInt(this.state.cscNeedle, 10) + parseInt(this.state.ttCsc, 10)}</strong></p>\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <h2 className={\"col-12 text-center alert alert-\" + (isCsc ? 'danger' : 'dark')}>{this.renderDecisionText(decisionText, isCsc ? cscList[0] : pscList[0])}</h2>\n            </div>\n          </form>\n\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <h3>Secondary PSCs</h3>\n              <ul>\n                <li>{this.renderSecondaryHospital(pscList[1], this.state.pscNeedle, secondaryTimeToMessage)}</li>\n                <li>{this.renderSecondaryHospital(pscList[2], this.state.pscNeedle, secondaryTimeToMessage)}</li>\n                <li>{this.renderSecondaryHospital(pscList[3], this.state.pscNeedle, secondaryTimeToMessage)}</li>\n              </ul>\n            </div>\n            <div className=\"col-6\">\n              <h3>Secondary CSCs</h3>\n              <ul>\n                <li>{this.renderSecondaryHospital(cscList[1], this.state.cscNeedle, secondaryTimeToMessage)}</li>\n                <li>{this.renderSecondaryHospital(cscList[2], this.state.cscNeedle, secondaryTimeToMessage)}</li>\n                <li>{this.renderSecondaryHospital(cscList[3], this.state.cscNeedle, secondaryTimeToMessage)}</li>\n              </ul>\n            </div>\n            </div>\n          </div>\n        );\n          \n    }\n}\n\nexport default StrokeTreatment;","import axios from \"axios\";\nimport cheerio from \"cheerio\";\nimport _ from \"lodash\";\nimport { Loader } from 'google-maps';\nimport { observable } from \"mobx\";\nimport { promisify } from 'util';\n\n\nconst options = {/* todo */};\nconst googleMapsLoader = new Loader(process.env.REACT_APP_MAPS_API_KEY, options);\n\nclass LocationHandler { \n  constructor() {\n    this.downloadNewList = this.downloadNewList.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n    this.hasCsc = this.hasCsc.bind(this);\n    this.hasPsc = this.hasPsc.bind(this);\n  }\n\n  comprehensiveStrokeCenters = observable([]);\n  primaryStrokeCenters = observable([]);\n  position = { latitude: 0, longitude: 0 };\n  geo;\n  timeBetween;\n\n  async getLocation(options) {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        resolve(position);\n      });\n    });\n  }\n\n  setUserPosition(position) {\n    this.position = { lat: position.coords.latitude, lng: position.coords.longitude };\n  }\n\n  hasCsc() {\n    if (!this.comprehensiveStrokeCenters) {\n      this.comprehensiveStrokeCenters.replace(sessionStorage.getItem('csc'));\n    }\n    return !!this.comprehensiveStrokeCenters;\n  }\n\n  hasPsc() {\n    if (!this.primaryStrokeCenters) {\n      this.primaryStrokeCenters.replace(sessionStorage.getItem('psc'));\n    }\n    return !!this.primaryStrokeCenters;\n  }\n\n  async downloadNewList() {\n    if ((this.position.longitude === 0 && this.position.latitude === 0) || !this.position) {\n      this.setUserPosition(await this.getLocation());\n    }\n\n    const mdhList = await axios({ url: `https://api.codetabs.com/v1/proxy?quest=https://www.health.state.mn.us/diseases/cardiovascular/stroke/designationlist.html` });\n\n    const body = cheerio.load(mdhList.data);\n\n    const csc = body('h2:contains(\"Comprehensive Stroke Center\")').next('ol').children('li');\n    _.forEach(csc, (item) => {\n      this.comprehensiveStrokeCenters.push(observable(this.parseHospital(item)));\n    });\n    const psc = body('h2:contains(\"Primary Stroke Centers\")').next('ol').children('li');\n    _.forEach(psc, (item) => { \n      this.primaryStrokeCenters.push(observable(this.parseHospital(item)));\n    });\n\n    const google = await googleMapsLoader.load();\n    const matrixService = new google.maps.DistanceMatrixService();\n    const getDistanceMatrix = promisify(matrixService.getDistanceMatrix);\n    const userPosition = this.position;\n\n    try{\n    const cscResponse = await getDistanceMatrix(\n      { origins: [ userPosition ],\n        destinations: this.comprehensiveStrokeCenters.map((csc) => `${csc.name} ${csc.city}` ),\n        travelMode: 'DRIVING',\n    });\n    const sortedCsc = this.parseDistanceMatrixResults(this.comprehensiveStrokeCenters, cscResponse);\n    this.comprehensiveStrokeCenters.replace(sortedCsc);\n  } catch (e) {\n    const sortedCsc = this.parseDistanceMatrixResults(this.comprehensiveStrokeCenters, e);\n    this.comprehensiveStrokeCenters.replace(sortedCsc);\n  }\n\n  try {\n    const pscResponse = await getDistanceMatrix(\n      { origins: [ userPosition ],\n        destinations: this.primaryStrokeCenters.map((psc) => `${psc.name} ${psc.city}` ),\n        travelMode: 'DRIVING',\n      });\n    const sortedPsc = this.parseDistanceMatrixResults(this.primaryStrokeCenters, pscResponse);\n    this.primaryStrokeCenters.replace(sortedPsc);\n  } catch (e) {\n    const sortedPsc = this.parseDistanceMatrixResults(this.primaryStrokeCenters, e);\n    this.primaryStrokeCenters.replace(sortedPsc);\n  }\n\n  try {\n    const timeBetweenResponse = await getDistanceMatrix(\n      { origins: [ `${this.primaryStrokeCenters[0].name} ${this.primaryStrokeCenters[0].city}` ],\n        destinations: [ `${this.comprehensiveStrokeCenters[0].name} ${this.comprehensiveStrokeCenters[0].city}` ],\n        travelMode: 'DRIVING',\n      });\n    this.timeBetween = this.parseDistanceMatrixResults([{}], timeBetweenResponse)[0].timeTo;\n  } catch (e) {\n    this.timeBetween = this.parseDistanceMatrixResults([{}], e)[0].timeTo;\n  }\n\n    sessionStorage.setItem('csc', this.comprehensiveStrokeCenters);\n    sessionStorage.setItem('psc', this.primaryStrokeCenters);\n    return;\n  }\n\n  parseDistanceMatrixResults(hospitalList, response) {\n    _.forEach(response.rows[0].elements, (matrixItem, index) => {\n      if (matrixItem.status === 'OK') {\n        hospitalList[index].timeTo = Math.round(matrixItem.duration.value / 60);//seconds to minutes and round\n        hospitalList[index].timeToText = matrixItem.duration.text;\n        hospitalList[index].timeToDistance = matrixItem.distance.text;\n      } else {\n        hospitalList[index].timeTo = 99999999;\n        hospitalList[index].timeToText = \"Failed Request\";\n        hospitalList[index].timeToDistance = \"Failed Request\";\n      }\n    });\n    const sortedList = _.orderBy(hospitalList, 'timeTo', 'asc');\n    return sortedList;\n  }\n\n  parseHospital(item) {\n    //for some reason they have a multi-part string for a hospital -_- (e.g. Mayo Clinic Hospital – Rochester, Saint Mary’s Campus – Rochester)\n    // We want [\"Mayo Clinic Hospital, Saint Mary’s Campus\", \"Rochester\"]\n    const listItem = item.children[0].data;\n    \n    const properSplit = listItem.replace(/[â–]/g, '-');\n    // eslint-disable-next-line\n    const cleanItem = properSplit.replace(/[^\\x00-\\x7F]/g, \"\");\n    const hospital = cleanItem.split('-');\n    if (hospital.length === 3) {\n      const newHospitalName = hospital[1].replace(/.*, / ,'');\n      hospital[0] = hospital[0] + newHospitalName;\n      hospital.splice(1, 1);\n    }\n\n    return { name: hospital[0].trim(), city: hospital[1].trim() };\n  }\n}\n\nexport default LocationHandler;","import React, { Component } from 'react';\nimport StrokeTreatment from './StrokeTreatment';\nimport LocationHandler from './LocationHandler';\nimport * as fa from '@fortawesome/fontawesome-svg-core';\nimport { observer } from \"mobx-react\"\n\nimport './App.css';\n\nexport const THROMBECTOMY = 'Thrombectomy';\nexport const ALTEPLASE ='IV Alteplase';\n\nconst App = observer(class App extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleTabClick = this.handleTabClick.bind(this);\n    this.state = {\n      tab: ALTEPLASE,\n      cscs: [],\n      pscs: [],\n      timeBetween: -1,\n      loading: true\n    };\n    this.locationHandler = new LocationHandler();\n    if (this.locationHandler.hasCsc() || !this.locationHandler.hasPsc()) {\n      this.locationHandler.downloadNewList().then(() => {\n        this.setState({\n          tab: ALTEPLASE,\n          loading: false\n        });\n      });\n    }\n  }\n\n  handleTabClick = (e) => {\n    e.preventDefault();\n    this.setState({ tab: e.target.name });\n  }\n\n  render() {\n    let { tab, loading } = this.state;\n\n    if (loading) {\n      return ( <div>{fa.icon('spinner')}</div>);\n    }\n\n    return (\n      <div className=\"mt-1\">\n        <nav className=\"nav nav-tabs\">\n          <a className={\"nav-item nav-link \" + (tab === ALTEPLASE ? 'active': '')} name={ALTEPLASE} href=\"#/\" onClick={this.handleTabClick}>IV Alteplase</a>\n          <a className={\"nav-item nav-link \" + (tab === THROMBECTOMY ? 'active': '')} name={THROMBECTOMY} href=\"#/\" onClick={this.handleTabClick}>Thrombectomy</a>\n        </nav>\n        { tab === ALTEPLASE ? \n            <StrokeTreatment \n              type={ALTEPLASE} \n              title='IV Alteplase' \n              rangeMessages={['PSC Door-to-Needle Time:', 'CSC Door-to-Needle Time:']}\n              secondaryTimeToMessage='time to tPA'\n              cscList={this.locationHandler.comprehensiveStrokeCenters}\n              pscList={this.locationHandler.primaryStrokeCenters} />\n            : null }\n        { tab === THROMBECTOMY ? \n            <StrokeTreatment \n              type={THROMBECTOMY} \n              title='Arterial Puncture'\n              rangeMessages={['PSC Door-in-Door-out Time:', 'CSC Door-to-Arterial Puncture Time:']}\n              secondaryTimeToMessage='time to puncture'\n              timeBetween={this.locationHandler.timeBetween}\n              cscList={this.locationHandler.comprehensiveStrokeCenters}\n              pscList={this.locationHandler.primaryStrokeCenters} />\n            : null }\n      </div>\n    );\n  }\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["StrokeTreatment.js","LocationHandler.js","App.js","serviceWorker.js","index.js"],"names":["PscText","CscText","StrokeTreatment","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","html","setState","defineProperty","target","name","value","triggerHospitalChange","changedState","_","forEach","thisState","index","state","isCsc","decisionText","_ref","ttCsc","ttPsc","ttBetween","cscNeedle","pscNeedle","tc","parseInt","tp","tBetween","defaultBetween","defaultTtPsc","defaultTtCsc","defaultText","timeBetween","type","ALTEPLASE","timeToPsc","timeToCsc","defaultState","cpc","renderClosestName","bind","assertThisInitialized","label","react_default","a","createElement","_this$props","title","rangeMessages","cscName","pscName","_this$state","className","htmlFor","id","onChange","min","max","Component","GoogleMapsLoader","require","KEY","LIBRARIES","VERSION","LocationHandler","comprehensiveStrokeCenters","primaryStrokeCenters","position","latitude","longitude","navigator","geolocation","geo","getCurrentPosition","setUserPosition","lat","coords","lng","sessionStorage","getItem","hasCsc","downloadNewList","hasPsc","promises","push","Promise","resolve","_this2","all","options","uri","transform","body","cheerio","load","withCredentials","rp","csc","next","children","item","parseHospital","psc","google","myLatLng","maps","LatLng","matrixService","DistanceMatrixService","getDistanceMatrix","origins","destinations","map","concat","city","travelMode","response","parseDistanceMatrixResults","timeTo","setItem","hospitalList","rows","elements","matrixItem","status","Math","round","duration","timeToText","text","timeToDistance","distance","orderBy","_this3","closest","overall","hospital","location","longDelta","abs","latDelta","listItem","data","replace","split","length","newHospitalName","splice","trim","App","context","handleTabClick","e","preventDefault","tab","cscs","pscs","loading","locationHandler","then","class","href","onClick","src_StrokeTreatment","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87208819.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ALTEPLASE } from './App';\nimport _ from 'lodash';\n\nconst PscText = 'You should go to the Primary Stroke Center';\nconst CscText = 'You should go to the Comprehensive Stroke Center';\n\nclass StrokeTreatment extends Component {\n    constructor(props) {\n        super(props);\n        var defaultBetween = 0, \n            defaultTtPsc = 15,\n            defaultTtCsc = 45,\n            defaultText = PscText,\n            defaultIsCsc = false;\n\n        if (props.timeBetween) {\n            defaultBetween = props.timeBetween;\n        } else if( props.type !== ALTEPLASE) {\n            defaultBetween = 30;\n        }\n        if (props.timeToPsc) {\n            defaultTtPsc = props.timeToPsc;\n        }\n        if (props.timeToCsc) {\n            defaultTtCsc = props.timeToCsc;\n        }\n\n\n        var defaultState = {\n            cscNeedle: 30,\n            pscNeedle: 30,\n            ttPsc: defaultTtPsc,\n            ttCsc: defaultTtCsc,\n            ttBetween: defaultBetween,\n            cpc: false,\n            isCsc: defaultIsCsc,\n            decisionText: defaultText\n        };\n\n        if (this.isCsc(defaultState)) {\n            defaultState.decisionText = CscText;\n            defaultState.isCsc = true;\n        }\n\n        this.state = defaultState;\n\n        this.renderClosestName = this.renderClosestName.bind(this);\n        this.triggerHospitalChange(['decisionText', 'isCsc'], [defaultState.decisionText, defaultState.isCsc]);//force update\n    }\n\n    handleChange = (html) => {\n        this.setState({ [html.target.name]: html.target.value });\n        \n        this.triggerHospitalChange([html.target.name], [html.target.value]);\n      };\n\n    triggerHospitalChange = (changedState, value) => {\n        _.forEach(changedState, (thisState, index) => {\n            this.state[thisState] = value[index];\n        })\n        \n        if (this.isCsc()) {\n            this.setState({ isCsc: true });\n            this.setState({ decisionText: CscText });\n        } else {\n            this.setState({ isCsc: false });\n            this.setState({ decisionText:  PscText });\n        }\n    }\n\n    isCsc = (state) => {\n        let { ttCsc, ttPsc, ttBetween, cscNeedle, pscNeedle } = state || this.state;\n        const tc = parseInt(ttCsc, 10);\n        const tp = parseInt(ttPsc, 10);\n        const tBetween = parseInt(ttBetween, 10);\n\n        const nc = parseInt(cscNeedle, 10);\n        const np = parseInt(pscNeedle, 10);\n        \n        if ((tc + nc) > (tp + np + tBetween)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    renderClosestName(label, name) {\n        if (!name) {\n            return;\n        }\n        return (\n            <label>Closest {label}:<br/> {name}</label>\n        );\n    }\n\n    render() {\n        const { title, rangeMessages, cscName, pscName, type } = this.props;\n        let { cscNeedle, pscNeedle, ttPsc, ttCsc, ttBetween, isCsc, decisionText } = this.state;\n\n        return (\n            <div> \n                <div className=\"row mt-3 mb-3\">\n                    <h2 className=\"col-12 text-center\">Time to {title}</h2>\n                </div>\n                <form>\n                <div className=\"row align-items-center\">\n                        <label className={\"col-\" + (type === ALTEPLASE ? '6' : '4')} htmlFor=\"time-to-psc\">Time to Primary Stroke Center</label>\n                        <label className={\"col-\" + (type === ALTEPLASE ? '6' : '4')} htmlFor=\"time-to-csc\">Time to Comprehensive Stroke Center</label>\n                        <label className={\"col-\" + (type === ALTEPLASE ? ' d-none' : '4')} htmlFor=\"time-between\">Time from Primary Stroke Center to Comprehensive Stroke Center</label>\n                    </div>\n        \n                    <div className=\"row\">\n                    <div className={\"col-\" + (type === ALTEPLASE ? '6' : '4')}>\n                        <div className=\"form-group\">\n                          {this.renderClosestName('PSC', pscName)}\n                          <input className=\"form-control\" type=\"number\" name=\"ttPsc\" id=\"time-to-psc\" value={ttPsc} onChange={this.handleChange}/>\n                        </div>\n                    </div>\n                    \n                    <div className={\"col-\" + (type === ALTEPLASE ? '6' : '4')}>\n                        <div className=\"form-group\">\n                        {this.renderClosestName('CSC', cscName)}\n                          <input className=\"form-control\" type=\"number\" name=\"ttCsc\" id=\"time-to-csc\" value={ttCsc} onChange={this.handleChange}/>\n                        </div>\n                    </div>\n                    \n        \n                    <div className={\"col-\" + (type === ALTEPLASE ? ' d-none' : '4')}>\n                        <div className=\"form-group\">\n                        <input className=\"form-control\" type=\"number\" name=\"ttBetween\" id=\"time-between\" value={ttBetween} onChange={this.handleChange}/>\n                        </div>\n                    </div>\n                    </div>\n        \n                    <div className=\"form-group\">\n                    <label htmlFor=\"pscNeedle\">{rangeMessages[0]} {pscNeedle}</label>\n                    <input type=\"range\" min={1} max={120} className=\"form-control-range\" id=\"pscNeedle\" name=\"pscNeedle\" value={pscNeedle} onChange={this.handleChange}></input>\n                    <label htmlFor=\"cscNeedle\">{rangeMessages[1]} {cscNeedle}</label>\n                    <input type=\"range\" min={1} max={120} className=\"form-control-range\" id=\"cscNeedle\" name=\"cscNeedle\" value={cscNeedle} onChange={this.handleChange}></input>\n                    </div>\n        \n                    <div className=\"row align-items-center\">\n                    <div className=\"col-6 text-right\">\n                        <span>Total time to {title} if</span>\n                    </div>\n                    <div className=\"col-6\">\n                        <p>PSC First: <strong>{parseInt(this.state.pscNeedle, 10) + parseInt(this.state.ttPsc, 10) + parseInt(this.state.ttBetween, 10)}</strong></p>\n                        <p>CSC First: <strong>{parseInt(this.state.cscNeedle, 10) + parseInt(this.state.ttCsc, 10)}</strong></p>\n                    </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <h2 className={\"col-12 text-center alert alert-\" + (isCsc ? 'danger' : 'dark')}>{decisionText}</h2>\n                    </div>\n                </form>\n            </div>\n        );\n          \n    }\n}\n\nexport default StrokeTreatment;","import rp from \"request-promise-native\";\nimport cheerio from \"cheerio\";\nimport _ from \"lodash\";\n\nvar GoogleMapsLoader = require('google-maps');\nGoogleMapsLoader.KEY = 'AIzaSyAGZX9cdeWsmegU4ODemgrLNYuzNhlw6cw';\nGoogleMapsLoader.LIBRARIES = [];\nGoogleMapsLoader.VERSION = '3.36';\n\nclass LocationHandler { \n  comprehensiveStrokeCenters = [];\n  primaryStrokeCenters = [];\n  position = { latitude: 0, longitude: 0 };\n  geo;\n  timeBetween;\n\n  constructor() {\n    if (navigator.geolocation) {\n      this.geo = navigator.geolocation;\n      this.geo.getCurrentPosition((position) => {\n        this.setUserPosition(position);\n      });\n    }\n  }\n\n  setUserPosition(position) {\n    this.position = { lat: position.coords.latitude, lng: position.coords.longitude };\n  }\n\n  hasCsc() {\n    if (!this.comprehensiveStrokeCenters) {\n      this.comprehensiveStrokeCenters = sessionStorage.getItem('csc')\n    }\n    return !!this.comprehensiveStrokeCenters\n  }\n\n  hasPsc() {\n    if (!this.primaryStrokeCenters) {\n      this.primaryStrokeCenters = sessionStorage.getItem('psc')\n    }\n    return !!this.primaryStrokeCenters\n  }\n\n  async getComprehensiveCenters() {\n    if (!this.hasCsc()) {\n      await this.downloadNewList();\n    }\n    return this.comprehensiveStrokeCenters;\n  }\n\n  async getPrimaryCenters() {\n    if (!this.hasPsc()) {\n      await this.downloadNewList();\n    }\n    return this.primaryStrokeCenters;\n  }\n\n  async downloadNewList() {\n    var promises = [];\n    if (!this.position) {\n      promises.push(new Promise((resolve) => this.geo.getCurrentPosition((position) => {\n        this.setUserPosition(position);\n        resolve();\n      })));\n    }\n    await Promise.all(promises);\n\n    this.comprehensiveStrokeCenters = [];\n    this.primaryStrokeCenters = [];\n    var options = {\n      uri: 'https://www.health.state.mn.us/diseases/cardiovascular/stroke/designationlist.html',\n      transform: (body) => {\n        return cheerio.load(body);\n      },\n      withCredentials: true\n    };\n    var body = await rp(options);\n    var csc = body('h2:contains(\"Comprehensive Stroke Center\")').next('ol').children('li');\n    _.forEach(csc, (item) => {\n      this.comprehensiveStrokeCenters.push(this.parseHospital(item));\n     });\n    var psc = body('h2:contains(\"Primary Stroke Centers\")').next('ol').children('li');\n    _.forEach(psc, (item) => { \n      this.primaryStrokeCenters.push(this.parseHospital(item));\n    });\n\n    promises = [];\n    var matrixService, myLatLng;\n    promises.push(\n      new Promise((resolve) => {\n        GoogleMapsLoader.load((google) => {\n          myLatLng = new google.maps.LatLng(this.position);\n          matrixService = new google.maps.DistanceMatrixService();\n          resolve(matrixService);\n        });\n      })\n    );\n    await Promise.all(promises);\n\n    promises = [];\n    promises.push(new Promise((resolve) => {\n      matrixService.getDistanceMatrix(\n      { origins: [ myLatLng ],\n        destinations: this.comprehensiveStrokeCenters.map((csc) => `${csc.name} ${csc.city}` ),\n        travelMode: 'DRIVING',\n      }, (response) => {\n        this.comprehensiveStrokeCenters = this.parseDistanceMatrixResults(this.comprehensiveStrokeCenters, response);\n        resolve();\n      });\n    }));\n\n    promises.push(new Promise((resolve) => {\n      matrixService.getDistanceMatrix(\n      { origins: [ myLatLng ],\n        destinations: this.primaryStrokeCenters.map((psc) => `${psc.name} ${psc.city}` ),\n        travelMode: 'DRIVING',\n      }, (response) => {\n        this.primaryStrokeCenters = this.parseDistanceMatrixResults(this.primaryStrokeCenters, response);\n        resolve();\n      });\n    }));\n    \n    await Promise.all(promises);\n\n    promises = [];\n    promises.push(new Promise((resolve) => {\n      matrixService.getDistanceMatrix(\n      { origins: [ `${this.primaryStrokeCenters[0].name} ${this.primaryStrokeCenters[0].city}` ],\n        destinations: [ `${this.comprehensiveStrokeCenters[0].name} ${this.comprehensiveStrokeCenters[0].city}` ],\n        travelMode: 'DRIVING',\n      }, (response) => {\n        this.timeBetween = this.parseDistanceMatrixResults([{}], response)[0].timeTo;\n        resolve();\n      });\n    }));\n\n    await Promise.all(promises);\n    sessionStorage.setItem('csc', this.comprehensiveStrokeCenters);\n    sessionStorage.setItem('psc', this.primaryStrokeCenters);\n  }\n\n  parseDistanceMatrixResults(hospitalList, response) {\n    _.forEach(response.rows[0].elements, (matrixItem, index) => {\n      if (matrixItem.status === 'OK') {\n        hospitalList[index].timeTo = Math.round(matrixItem.duration.value / 60);//seconds to minutes and round\n        hospitalList[index].timeToText = matrixItem.duration.text;\n        hospitalList[index].timeToDistance = matrixItem.distance.text;\n      } else {\n        hospitalList[index].timeTo = 99999999;\n        hospitalList[index].timeToText = \"Failed Request\";\n        hospitalList[index].timeToDistance = \"Failed Request\";\n      }\n    });\n    return _.orderBy(hospitalList, 'timeTo', 'asc');\n  }\n\n  getClosest(hospitalList) {\n    var closest = { longitude: -1, latitude: -1, overall: -1, index: -1 };\n    hospitalList.forEach((hospital, index) => {\n      if (hospital.location) {\n        var longDelta = Math.abs(this.position.longitude - hospital.location.longitude);\n        var latDelta = Math.abs(this.position.latitude - hospital.location.latitude);\n        if (longDelta + latDelta < closest.overall\n            || closest.overall === -1) {\n           closest = { \n            longitude: longDelta,\n            latitude: latDelta,\n            overall: (longDelta + latDelta),\n            index: index,\n            hospital: hospital\n          };\n        }\n      }\n    });\n    return closest;\n  }\n\n\n  parseHospital(item) {\n    //for some reason they have a multi-part string for a hospital -_- (e.g. Mayo Clinic Hospital – Rochester, Saint Mary’s Campus – Rochester)\n    // We want [\"Mayo Clinic Hospital, Saint Mary’s Campus\", \"Rochester\"]\n    var listItem = item.children[0].data;\n    listItem = listItem.replace('â', '-');\n    listItem = listItem.replace(/[^\\x00-\\x7F]/g, \"\");\n    var hospital = listItem.split('-');\n    if (hospital.length === 3) {\n      var newHospitalName = hospital[1].replace(/.*, / ,'');\n      hospital[0] = hospital[0] + newHospitalName;\n      hospital.splice(1, 1);\n    }\n    hospital[0] = hospital[0].trim();\n    hospital[1] = hospital[1].trim();\n\n    return { name: hospital[0], city: hospital[1] };\n  }\n}\n\nexport default LocationHandler;","import React, { Component } from 'react';\nimport StrokeTreatment from './StrokeTreatment';\nimport LocationHandler from './LocationHandler';\n\nimport './App.css';\n\nexport const THROMBECTOMY = 'Thrombectomy';\nexport const ALTEPLASE ='IV Alteplase';\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleTabClick = this.handleTabClick.bind(this);\n    this.state = {\n      tab: ALTEPLASE,\n      cscs: [],\n      pscs: [],\n      timeBetween: -1,\n      loading: true\n    };\n    this.locationHandler = new LocationHandler();\n    if (this.locationHandler.hasCsc() || !this.locationHandler.hasPsc()) {\n      this.locationHandler.downloadNewList().then(() => {\n        this.setState({\n          tab: ALTEPLASE,\n          cscs: this.locationHandler.comprehensiveStrokeCenters,\n          pscs: this.locationHandler.primaryStrokeCenters,\n          timeBetween: this.locationHandler.timeBetween,\n          loading: false\n        });\n      });\n    }\n    \n\n  }\n\n  handleTabClick = (e) => {\n    e.preventDefault();\n    this.setState({ tab: e.target.name });\n  }\n\n  render() {    \n    let { tab, cscs, pscs, timeBetween, loading } = this.state;\n    let timeToCsc, timeToPsc, cscName, pscName;\n    if (cscs.length > 0 && pscs.length > 0) {\n      timeToCsc = cscs[0].timeTo;\n      timeToPsc = pscs[0].timeTo;\n      cscName = cscs[0].name + ' ' + cscs[0].city;\n      pscName = pscs[0].name + ' ' + pscs[0].city;\n    }\n    \n    if (loading) {\n      return ( <div><i class=\"fas fa-sync fa-spin\"></i></div>);\n    }\n\n    return (\n      <div className=\"mt-1\">\n        <nav className=\"nav nav-tabs\">\n          <a className={\"nav-item nav-link \" + (tab === ALTEPLASE ? 'active': '')} name={ALTEPLASE} href=\"#/\" onClick={this.handleTabClick}>IV Alteplase</a>\n          <a className={\"nav-item nav-link \" + (tab === THROMBECTOMY ? 'active': '')} name={THROMBECTOMY} href=\"#/\" onClick={this.handleTabClick}>Thrombectomy</a>\n        </nav>\n        { tab === ALTEPLASE ? \n            <StrokeTreatment \n              type={ALTEPLASE} \n              title='IV Alteplase' \n              rangeMessages={['PSC Door-to-Needle Time:', 'CSC Door-to-Needle Time:']} \n              timeToCsc={timeToCsc}\n              timeToPsc={timeToPsc}\n              cscName={cscName}\n              pscName={pscName} />\n            : null }\n        { tab === THROMBECTOMY ? \n            <StrokeTreatment \n              type={THROMBECTOMY} \n              title='Arterial Puncture'\n              rangeMessages={['PSC Door-in-Door-out Time:', 'CSC Door-to-Arterial Puncture Time:']} \n              timeToCsc={timeToCsc}\n              timeToPsc={timeToPsc}\n              cscName={cscName}\n              pscName={pscName}\n              timeBetween={timeBetween} />\n            : null }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
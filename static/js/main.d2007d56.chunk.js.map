{"version":3,"sources":["StrokeTreatment.js","LocationHandler.js","App.js","serviceWorker.js","index.js"],"names":["PscText","CscText","StrokeTreatment","props","handleChange","html","setState","target","name","value","triggerHospitalChange","changedState","_","forEach","thisState","index","state","isCsc","decisionText","ttCsc","ttPsc","ttBetween","cscNeedle","pscNeedle","tc","parseInt","tp","tBetween","defaultBetween","defaultTtPsc","defaultTtCsc","timeBetween","type","ALTEPLASE","timeToPsc","timeToCsc","defaultState","cpc","renderClosestName","bind","label","this","title","rangeMessages","cscName","pscName","className","htmlFor","id","onChange","min","max","Component","GoogleMapsLoader","require","KEY","LIBRARIES","VERSION","LocationHandler","comprehensiveStrokeCenters","primaryStrokeCenters","position","latitude","longitude","navigator","geolocation","geo","getCurrentPosition","setUserPosition","lat","coords","lng","sessionStorage","getItem","hasCsc","downloadNewList","hasPsc","promises","push","Promise","resolve","all","options","uri","encodeURIComponent","transform","body","cheerio","load","headers","rp","csc","next","children","item","parseHospital","psc","google","myLatLng","maps","LatLng","matrixService","DistanceMatrixService","getDistanceMatrix","origins","destinations","map","city","travelMode","response","parseDistanceMatrixResults","timeTo","setItem","hospitalList","rows","elements","matrixItem","status","Math","round","duration","timeToText","text","timeToDistance","distance","orderBy","closest","overall","hospital","location","longDelta","abs","latDelta","listItem","data","replace","split","length","newHospitalName","splice","trim","App","context","handleTabClick","e","preventDefault","tab","cscs","pscs","loading","locationHandler","then","fa","href","onClick","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2007d56.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ALTEPLASE } from './App';\nimport _ from 'lodash';\n\nconst PscText = 'You should go to the Primary Stroke Center';\nconst CscText = 'You should go to the Comprehensive Stroke Center';\n\nclass StrokeTreatment extends Component {\n    constructor(props) {\n        super(props);\n        var defaultBetween = 0, \n            defaultTtPsc = 15,\n            defaultTtCsc = 45,\n            defaultText = PscText,\n            defaultIsCsc = false;\n\n        if (props.timeBetween) {\n            defaultBetween = props.timeBetween;\n        } else if( props.type !== ALTEPLASE) {\n            defaultBetween = 30;\n        }\n        if (props.timeToPsc) {\n            defaultTtPsc = props.timeToPsc;\n        }\n        if (props.timeToCsc) {\n            defaultTtCsc = props.timeToCsc;\n        }\n\n\n        var defaultState = {\n            cscNeedle: 30,\n            pscNeedle: 30,\n            ttPsc: defaultTtPsc,\n            ttCsc: defaultTtCsc,\n            ttBetween: defaultBetween,\n            cpc: false,\n            isCsc: defaultIsCsc,\n            decisionText: defaultText\n        };\n\n        if (this.isCsc(defaultState)) {\n            defaultState.decisionText = CscText;\n            defaultState.isCsc = true;\n        }\n\n        this.state = defaultState;\n\n        this.renderClosestName = this.renderClosestName.bind(this);\n        this.triggerHospitalChange(['decisionText', 'isCsc'], [defaultState.decisionText, defaultState.isCsc]);//force update\n    }\n\n    handleChange = (html) => {\n        this.setState({ [html.target.name]: html.target.value });\n        \n        this.triggerHospitalChange([html.target.name], [html.target.value]);\n      };\n\n    triggerHospitalChange = (changedState, value) => {\n        _.forEach(changedState, (thisState, index) => {\n            this.state[thisState] = value[index];\n        })\n        \n        if (this.isCsc()) {\n            this.setState({ isCsc: true });\n            this.setState({ decisionText: CscText });\n        } else {\n            this.setState({ isCsc: false });\n            this.setState({ decisionText:  PscText });\n        }\n    }\n\n    isCsc = (state) => {\n        let { ttCsc, ttPsc, ttBetween, cscNeedle, pscNeedle } = state || this.state;\n        const tc = parseInt(ttCsc, 10);\n        const tp = parseInt(ttPsc, 10);\n        const tBetween = parseInt(ttBetween, 10);\n\n        const nc = parseInt(cscNeedle, 10);\n        const np = parseInt(pscNeedle, 10);\n        \n        if ((tc + nc) > (tp + np + tBetween)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    renderClosestName(label, name) {\n        if (!name) {\n            return;\n        }\n        return (\n            <label>Closest {label}:<br/> {name}</label>\n        );\n    }\n\n    render() {\n        const { title, rangeMessages, cscName, pscName, type } = this.props;\n        let { cscNeedle, pscNeedle, ttPsc, ttCsc, ttBetween, isCsc, decisionText } = this.state;\n\n        return (\n            <div> \n                <div className=\"row mt-3 mb-3\">\n                    <h2 className=\"col-12 text-center\">Time to {title}</h2>\n                </div>\n                <form>\n                <div className=\"row align-items-center\">\n                        <label className={\"col-\" + (type === ALTEPLASE ? '6' : '4')} htmlFor=\"time-to-psc\">Time to Primary Stroke Center</label>\n                        <label className={\"col-\" + (type === ALTEPLASE ? '6' : '4')} htmlFor=\"time-to-csc\">Time to Comprehensive Stroke Center</label>\n                        <label className={\"col-\" + (type === ALTEPLASE ? ' d-none' : '4')} htmlFor=\"time-between\">Time from Primary Stroke Center to Comprehensive Stroke Center</label>\n                    </div>\n        \n                    <div className=\"row\">\n                    <div className={\"col-\" + (type === ALTEPLASE ? '6' : '4')}>\n                        <div className=\"form-group\">\n                          {this.renderClosestName('PSC', pscName)}\n                          <input className=\"form-control\" type=\"number\" name=\"ttPsc\" id=\"time-to-psc\" value={ttPsc} onChange={this.handleChange}/>\n                        </div>\n                    </div>\n                    \n                    <div className={\"col-\" + (type === ALTEPLASE ? '6' : '4')}>\n                        <div className=\"form-group\">\n                        {this.renderClosestName('CSC', cscName)}\n                          <input className=\"form-control\" type=\"number\" name=\"ttCsc\" id=\"time-to-csc\" value={ttCsc} onChange={this.handleChange}/>\n                        </div>\n                    </div>\n                    \n        \n                    <div className={\"col-\" + (type === ALTEPLASE ? ' d-none' : '4')}>\n                        <div className=\"form-group\">\n                        <input className=\"form-control\" type=\"number\" name=\"ttBetween\" id=\"time-between\" value={ttBetween} onChange={this.handleChange}/>\n                        </div>\n                    </div>\n                    </div>\n        \n                    <div className=\"form-group\">\n                    <label htmlFor=\"pscNeedle\">{rangeMessages[0]} {pscNeedle}</label>\n                    <input type=\"range\" min={1} max={120} className=\"form-control-range\" id=\"pscNeedle\" name=\"pscNeedle\" value={pscNeedle} onChange={this.handleChange}></input>\n                    <label htmlFor=\"cscNeedle\">{rangeMessages[1]} {cscNeedle}</label>\n                    <input type=\"range\" min={1} max={120} className=\"form-control-range\" id=\"cscNeedle\" name=\"cscNeedle\" value={cscNeedle} onChange={this.handleChange}></input>\n                    </div>\n        \n                    <div className=\"row align-items-center\">\n                    <div className=\"col-6 text-right\">\n                        <span>Total time to {title} if</span>\n                    </div>\n                    <div className=\"col-6\">\n                        <p>PSC First: <strong>{parseInt(this.state.pscNeedle, 10) + parseInt(this.state.ttPsc, 10) + parseInt(this.state.ttBetween, 10)}</strong></p>\n                        <p>CSC First: <strong>{parseInt(this.state.cscNeedle, 10) + parseInt(this.state.ttCsc, 10)}</strong></p>\n                    </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <h2 className={\"col-12 text-center alert alert-\" + (isCsc ? 'danger' : 'dark')}>{decisionText}</h2>\n                    </div>\n                </form>\n            </div>\n        );\n          \n    }\n}\n\nexport default StrokeTreatment;","import rp from \"request-promise-native\";\nimport cheerio from \"cheerio\";\nimport _ from \"lodash\";\n\nvar GoogleMapsLoader = require('google-maps');\nGoogleMapsLoader.KEY = 'AIzaSyAGZX9cdeWsmegU4ODemgrLNYuzNhlw6cw';\nGoogleMapsLoader.LIBRARIES = [];\nGoogleMapsLoader.VERSION = '3.36';\n\nclass LocationHandler { \n  comprehensiveStrokeCenters = [];\n  primaryStrokeCenters = [];\n  position = { latitude: 0, longitude: 0 };\n  geo;\n  timeBetween;\n\n  constructor() {\n    if (navigator.geolocation) {\n      this.geo = navigator.geolocation;\n      this.geo.getCurrentPosition((position) => {\n        this.setUserPosition(position);\n      });\n    }\n  }\n\n  setUserPosition(position) {\n    this.position = { lat: position.coords.latitude, lng: position.coords.longitude };\n  }\n\n  hasCsc() {\n    if (!this.comprehensiveStrokeCenters) {\n      this.comprehensiveStrokeCenters = sessionStorage.getItem('csc')\n    }\n    return !!this.comprehensiveStrokeCenters\n  }\n\n  hasPsc() {\n    if (!this.primaryStrokeCenters) {\n      this.primaryStrokeCenters = sessionStorage.getItem('psc')\n    }\n    return !!this.primaryStrokeCenters\n  }\n\n  async getComprehensiveCenters() {\n    if (!this.hasCsc()) {\n      await this.downloadNewList();\n    }\n    return this.comprehensiveStrokeCenters;\n  }\n\n  async getPrimaryCenters() {\n    if (!this.hasPsc()) {\n      await this.downloadNewList();\n    }\n    return this.primaryStrokeCenters;\n  }\n\n  async downloadNewList() {\n    var promises = [];\n    if (!this.position) {\n      promises.push(new Promise((resolve) => this.geo.getCurrentPosition((position) => {\n        this.setUserPosition(position);\n        resolve();\n      })));\n    }\n    await Promise.all(promises);\n\n    this.comprehensiveStrokeCenters = [];\n    this.primaryStrokeCenters = [];\n    var options = {\n      uri: `https://anyorigin.com/go?url=${encodeURIComponent('health.state.mn.us/diseases/cardiovascular/stroke/designationlist.html')}&callback=?`,\n      transform: (body) => {\n        return cheerio.load(body);\n      },\n      headers: { 'origin': 'matterickson.me' }\n    };\n    var body = await rp(options);\n    var csc = body('h2:contains(\"Comprehensive Stroke Center\")').next('ol').children('li');\n    _.forEach(csc, (item) => {\n      this.comprehensiveStrokeCenters.push(this.parseHospital(item));\n     });\n    var psc = body('h2:contains(\"Primary Stroke Centers\")').next('ol').children('li');\n    _.forEach(psc, (item) => { \n      this.primaryStrokeCenters.push(this.parseHospital(item));\n    });\n\n    promises = [];\n    var matrixService, myLatLng;\n    promises.push(\n      new Promise((resolve) => {\n        GoogleMapsLoader.load((google) => {\n          myLatLng = new google.maps.LatLng(this.position);\n          matrixService = new google.maps.DistanceMatrixService();\n          resolve(matrixService);\n        });\n      })\n    );\n    await Promise.all(promises);\n\n    promises = [];\n    promises.push(new Promise((resolve) => {\n      matrixService.getDistanceMatrix(\n      { origins: [ myLatLng ],\n        destinations: this.comprehensiveStrokeCenters.map((csc) => `${csc.name} ${csc.city}` ),\n        travelMode: 'DRIVING',\n      }, (response) => {\n        this.comprehensiveStrokeCenters = this.parseDistanceMatrixResults(this.comprehensiveStrokeCenters, response);\n        resolve();\n      });\n    }));\n\n    promises.push(new Promise((resolve) => {\n      matrixService.getDistanceMatrix(\n      { origins: [ myLatLng ],\n        destinations: this.primaryStrokeCenters.map((psc) => `${psc.name} ${psc.city}` ),\n        travelMode: 'DRIVING',\n      }, (response) => {\n        this.primaryStrokeCenters = this.parseDistanceMatrixResults(this.primaryStrokeCenters, response);\n        resolve();\n      });\n    }));\n    \n    await Promise.all(promises);\n\n    promises = [];\n    promises.push(new Promise((resolve) => {\n      matrixService.getDistanceMatrix(\n      { origins: [ `${this.primaryStrokeCenters[0].name} ${this.primaryStrokeCenters[0].city}` ],\n        destinations: [ `${this.comprehensiveStrokeCenters[0].name} ${this.comprehensiveStrokeCenters[0].city}` ],\n        travelMode: 'DRIVING',\n      }, (response) => {\n        this.timeBetween = this.parseDistanceMatrixResults([{}], response)[0].timeTo;\n        resolve();\n      });\n    }));\n\n    await Promise.all(promises);\n    sessionStorage.setItem('csc', this.comprehensiveStrokeCenters);\n    sessionStorage.setItem('psc', this.primaryStrokeCenters);\n  }\n\n  parseDistanceMatrixResults(hospitalList, response) {\n    _.forEach(response.rows[0].elements, (matrixItem, index) => {\n      if (matrixItem.status === 'OK') {\n        hospitalList[index].timeTo = Math.round(matrixItem.duration.value / 60);//seconds to minutes and round\n        hospitalList[index].timeToText = matrixItem.duration.text;\n        hospitalList[index].timeToDistance = matrixItem.distance.text;\n      } else {\n        hospitalList[index].timeTo = 99999999;\n        hospitalList[index].timeToText = \"Failed Request\";\n        hospitalList[index].timeToDistance = \"Failed Request\";\n      }\n    });\n    return _.orderBy(hospitalList, 'timeTo', 'asc');\n  }\n\n  getClosest(hospitalList) {\n    var closest = { longitude: -1, latitude: -1, overall: -1, index: -1 };\n    hospitalList.forEach((hospital, index) => {\n      if (hospital.location) {\n        var longDelta = Math.abs(this.position.longitude - hospital.location.longitude);\n        var latDelta = Math.abs(this.position.latitude - hospital.location.latitude);\n        if (longDelta + latDelta < closest.overall\n            || closest.overall === -1) {\n           closest = { \n            longitude: longDelta,\n            latitude: latDelta,\n            overall: (longDelta + latDelta),\n            index: index,\n            hospital: hospital\n          };\n        }\n      }\n    });\n    return closest;\n  }\n\n\n  parseHospital(item) {\n    //for some reason they have a multi-part string for a hospital -_- (e.g. Mayo Clinic Hospital – Rochester, Saint Mary’s Campus – Rochester)\n    // We want [\"Mayo Clinic Hospital, Saint Mary’s Campus\", \"Rochester\"]\n    var listItem = item.children[0].data;\n    listItem = listItem.replace('â', '-');\n    listItem = listItem.replace(/[^\\x00-\\x7F]/g, \"\");\n    var hospital = listItem.split('-');\n    if (hospital.length === 3) {\n      var newHospitalName = hospital[1].replace(/.*, / ,'');\n      hospital[0] = hospital[0] + newHospitalName;\n      hospital.splice(1, 1);\n    }\n    hospital[0] = hospital[0].trim();\n    hospital[1] = hospital[1].trim();\n\n    return { name: hospital[0], city: hospital[1] };\n  }\n}\n\nexport default LocationHandler;","import React, { Component } from 'react';\nimport StrokeTreatment from './StrokeTreatment';\nimport LocationHandler from './LocationHandler';\nimport * as fa from '@fortawesome/fontawesome-svg-core';\n\n\nimport './App.css';\n\nexport const THROMBECTOMY = 'Thrombectomy';\nexport const ALTEPLASE ='IV Alteplase';\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.handleTabClick = this.handleTabClick.bind(this);\n    this.state = {\n      tab: ALTEPLASE,\n      cscs: [],\n      pscs: [],\n      timeBetween: -1,\n      loading: true\n    };\n    this.locationHandler = new LocationHandler();\n    if (this.locationHandler.hasCsc() || !this.locationHandler.hasPsc()) {\n      this.locationHandler.downloadNewList().then(() => {\n        this.setState({\n          tab: ALTEPLASE,\n          cscs: this.locationHandler.comprehensiveStrokeCenters,\n          pscs: this.locationHandler.primaryStrokeCenters,\n          timeBetween: this.locationHandler.timeBetween,\n          loading: false\n        });\n      });\n    }\n    \n\n  }\n\n  handleTabClick = (e) => {\n    e.preventDefault();\n    this.setState({ tab: e.target.name });\n  }\n\n  render() {    \n    let { tab, cscs, pscs, timeBetween, loading } = this.state;\n    let timeToCsc, timeToPsc, cscName, pscName;\n    if (cscs.length > 0 && pscs.length > 0) {\n      timeToCsc = cscs[0].timeTo;\n      timeToPsc = pscs[0].timeTo;\n      cscName = cscs[0].name + ' ' + cscs[0].city;\n      pscName = pscs[0].name + ' ' + pscs[0].city;\n    }\n    \n    if (loading) {\n      return ( <div>{fa.icon('spinner')}</div>);\n    }\n\n    return (\n      <div className=\"mt-1\">\n        <nav className=\"nav nav-tabs\">\n          <a className={\"nav-item nav-link \" + (tab === ALTEPLASE ? 'active': '')} name={ALTEPLASE} href=\"#/\" onClick={this.handleTabClick}>IV Alteplase</a>\n          <a className={\"nav-item nav-link \" + (tab === THROMBECTOMY ? 'active': '')} name={THROMBECTOMY} href=\"#/\" onClick={this.handleTabClick}>Thrombectomy</a>\n        </nav>\n        { tab === ALTEPLASE ? \n            <StrokeTreatment \n              type={ALTEPLASE} \n              title='IV Alteplase' \n              rangeMessages={['PSC Door-to-Needle Time:', 'CSC Door-to-Needle Time:']} \n              timeToCsc={timeToCsc}\n              timeToPsc={timeToPsc}\n              cscName={cscName}\n              pscName={pscName} />\n            : null }\n        { tab === THROMBECTOMY ? \n            <StrokeTreatment \n              type={THROMBECTOMY} \n              title='Arterial Puncture'\n              rangeMessages={['PSC Door-in-Door-out Time:', 'CSC Door-to-Arterial Puncture Time:']} \n              timeToCsc={timeToCsc}\n              timeToPsc={timeToPsc}\n              cscName={cscName}\n              pscName={pscName}\n              timeBetween={timeBetween} />\n            : null }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}